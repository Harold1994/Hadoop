/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** A pair of strings with aliased field names. */
@org.apache.avro.specific.AvroGenerated
public class StringPair extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5391916414603602113L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StringPair\",\"doc\":\"A pair of strings with aliased field names.\",\"fields\":[{\"name\":\"first\",\"type\":\"string\",\"aliases\":[\"left\"]},{\"name\":\"second\",\"type\":\"string\",\"aliases\":[\"right\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StringPair> ENCODER =
      new BinaryMessageEncoder<StringPair>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StringPair> DECODER =
      new BinaryMessageDecoder<StringPair>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<StringPair> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<StringPair> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StringPair>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this StringPair to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a StringPair from a ByteBuffer. */
  public static StringPair fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence first;
  @Deprecated public java.lang.CharSequence second;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StringPair() {}

  /**
   * All-args constructor.
   * @param first The new value for first
   * @param second The new value for second
   */
  public StringPair(java.lang.CharSequence first, java.lang.CharSequence second) {
    this.first = first;
    this.second = second;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return first;
    case 1: return second;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: first = (java.lang.CharSequence)value$; break;
    case 1: second = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'first' field.
   * @return The value of the 'first' field.
   */
  public java.lang.CharSequence getFirst() {
    return first;
  }

  /**
   * Sets the value of the 'first' field.
   * @param value the value to set.
   */
  public void setFirst(java.lang.CharSequence value) {
    this.first = value;
  }

  /**
   * Gets the value of the 'second' field.
   * @return The value of the 'second' field.
   */
  public java.lang.CharSequence getSecond() {
    return second;
  }

  /**
   * Sets the value of the 'second' field.
   * @param value the value to set.
   */
  public void setSecond(java.lang.CharSequence value) {
    this.second = value;
  }

  /**
   * Creates a new StringPair RecordBuilder.
   * @return A new StringPair RecordBuilder
   */
  public static StringPair.Builder newBuilder() {
    return new StringPair.Builder();
  }

  /**
   * Creates a new StringPair RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StringPair RecordBuilder
   */
  public static StringPair.Builder newBuilder(StringPair.Builder other) {
    return new StringPair.Builder(other);
  }

  /**
   * Creates a new StringPair RecordBuilder by copying an existing StringPair instance.
   * @param other The existing instance to copy.
   * @return A new StringPair RecordBuilder
   */
  public static StringPair.Builder newBuilder(StringPair other) {
    return new StringPair.Builder(other);
  }

  /**
   * RecordBuilder for StringPair instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StringPair>
    implements org.apache.avro.data.RecordBuilder<StringPair> {

    private java.lang.CharSequence first;
    private java.lang.CharSequence second;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(StringPair.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.first)) {
        this.first = data().deepCopy(fields()[0].schema(), other.first);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.second)) {
        this.second = data().deepCopy(fields()[1].schema(), other.second);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing StringPair instance
     * @param other The existing instance to copy.
     */
    private Builder(StringPair other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.first)) {
        this.first = data().deepCopy(fields()[0].schema(), other.first);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.second)) {
        this.second = data().deepCopy(fields()[1].schema(), other.second);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'first' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirst() {
      return first;
    }

    /**
      * Sets the value of the 'first' field.
      * @param value The value of 'first'.
      * @return This builder.
      */
    public StringPair.Builder setFirst(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.first = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'first' field has been set.
      * @return True if the 'first' field has been set, false otherwise.
      */
    public boolean hasFirst() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'first' field.
      * @return This builder.
      */
    public StringPair.Builder clearFirst() {
      first = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'second' field.
      * @return The value.
      */
    public java.lang.CharSequence getSecond() {
      return second;
    }

    /**
      * Sets the value of the 'second' field.
      * @param value The value of 'second'.
      * @return This builder.
      */
    public StringPair.Builder setSecond(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.second = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'second' field has been set.
      * @return True if the 'second' field has been set, false otherwise.
      */
    public boolean hasSecond() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'second' field.
      * @return This builder.
      */
    public StringPair.Builder clearSecond() {
      second = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StringPair build() {
      try {
        StringPair record = new StringPair();
        record.first = fieldSetFlags()[0] ? this.first : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.second = fieldSetFlags()[1] ? this.second : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StringPair>
    WRITER$ = (org.apache.avro.io.DatumWriter<StringPair>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StringPair>
    READER$ = (org.apache.avro.io.DatumReader<StringPair>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
